{"version":3,"sources":["webpack:///src/app/constants/formValidationMessages.ts","webpack:///src/app/contact/contact-routing.module.ts","webpack:///src/app/contact/contact.module.ts","webpack:///src/app/contact/contact.page.ts","webpack:///src/app/providers/helper.service.ts","webpack:///src/app/contact/contact.page.scss","webpack:///src/app/contact/contact.page.html"],"names":["CONTACT","first_name","required","last_name","email","summary","routes","path","component","ContactPage","ContactPageRoutingModule","NgModule","imports","RouterModule","exports","ContactPageModule","CommonModule","FormsModule","IonicModule","ReactiveFormsModule","declarations","helperService","functions","inquiryType","formError","company","validationMessage","mail_res","is_loading","createFormControl","createForm","console","log","fname","contactForm","controls","value","lname","contact_email","org","description","email_info","httpsCallable","subscribe","res","FormControl","Validators","FormGroup","valueChanges","data","onFormValueChanged","prepareValidationMessage","HelperService","AngularFireFunctions","Component","selector","template","form","formFields","field","control","invalid","messageObj","key","errors","Injectable","providedIn"],"mappings":"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","file":"src_app_contact_contact_module_ts-es5.js","sourcesContent":["export const CONTACT = {\n    first_name: {\n        required: 'First name is required'\n    },\n    last_name: {\n        required: 'Last name is required'\n    },\n    email: {\n        required: 'email is required',\n        email: 'email is invalid'\n    },\n    summary: {\n        required: 'summary is required'\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactPage } from './contact.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ContactPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ContactPageRoutingModule } from './contact-routing.module';\n\nimport { ContactPage } from './contact.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    ContactPageRoutingModule\n  ],\n  declarations: [ContactPage]\n})\nexport class ContactPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CONTACT } from '../constants/formValidationMessages';\nimport { HelperService } from '../providers/helper.service';\nimport { AngularFireFunctions } from '@angular/fire/functions';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.page.html',\n  styleUrls: ['./contact.page.scss'],\n})\nexport class ContactPage implements OnInit {\n\n  contactForm: FormGroup;\n  first_name: FormControl;\n  last_name: FormControl;\n  company: FormControl;\n  email: FormControl;\n  summary: FormControl;\n\n  inquiryType: string = '';\n  formError: any = {\n    first_name: '',\n    last_name: '',\n    company: '',\n    email: '',\n    summary: '',\n  };\n  validationMessage: any = CONTACT;\n\n  mail_res = '';\n  is_loading = false;\n\n  constructor(\n    private helperService: HelperService,\n    private functions: AngularFireFunctions,\n  ) { }\n\n  ngOnInit() {\n    this.createFormControl();\n    this.createForm();\n  }\n\n  onSubmit(){\n    this.is_loading = true;\n    console.log('submit');\n    const fname = this.contactForm.controls[\"first_name\"].value;\n    const lname = this.contactForm.controls[\"last_name\"].value;\n    const contact_email = this.contactForm.controls[\"email\"].value;\n    const org = this.contactForm.controls[\"company\"].value;\n    const description = this.contactForm.controls[\"summary\"].value;\n\n    const email_info = {\n      \"body\": \"first name: \"+ fname + \"\\nlast name: \" + lname +\n              \"\\nemail: \" + contact_email + \"\\ncompany: \" + org +\n              \"\\ndescription: \" + description\n    }\n    this.functions.httpsCallable(\"sendMail\")(email_info)\n      .subscribe(res => {\n        console.log(res);\n        this.mail_res = res;\n        this.is_loading = false;\n      })\n  }\n\n  createFormControl(){\n    this.first_name = new FormControl('', [Validators.required]),\n    this.last_name = new FormControl('', [Validators.required]),\n    this.email = new FormControl('', [Validators.required, Validators.email]),\n    this.company = new FormControl(''),\n    this.summary = new FormControl('', Validators.required)\n  }\n\n  createForm(){\n    this.contactForm = new FormGroup({\n      first_name: this.first_name,\n      last_name: this.last_name,\n      email: this.email,\n      company: this.company,\n      summary: this.summary\n    })\n    this.contactForm.valueChanges.subscribe(data => this.onFormValueChanged(data));\n  }\n\n  onFormValueChanged(data) {\n    this.formError = this.helperService.prepareValidationMessage(this.contactForm, this.validationMessage, this.formError)\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperService {\n\n  constructor() { }\n\n  prepareValidationMessage(form, validationMessage, formFields){\n    for (const field in formFields) {\n      formFields[field] = '';\n      const control = form.controls[field];\n      if (control && control.invalid) {\n        const messageObj = validationMessage[field];\n        for (const key in control.errors) {\n          formFields[field] = formFields[field] + messageObj[key] + ' ';\n        }\n      }\n    }\n    return formFields;\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb250YWN0LnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title class=\\\"ion-text-left\\\">\\n      Contact Me\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<app-alert *ngIf=\\\"mail_res\\\" [message]=\\\"mail_res\\\" (close)=\\\"onClose()\\\"></app-alert>\\n<ion-content>\\n  <ion-grid fixed>\\n    <ion-row>\\n      <ion-col>\\n        <ion-card>\\n          <ion-card-header>\\n            <ion-card-title class=\\\"ion-text-center\\\">\\n              Contact Form\\n            </ion-card-title>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <form [formGroup]=\\\"contactForm\\\" autocomplete=\\\"off\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">First Name</ion-label>\\n                <ion-input type=\\\"text\\\" formControlName=\\\"first_name\\\"></ion-input>\\n              </ion-item>\\n              <div *ngIf=\\\"first_name.invalid && (first_name.dirty || first_name.touched)\\\" class=\\\"error-message\\\">{{formError.first_name}}</div>\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">Last Name</ion-label>\\n                <ion-input type=\\\"text\\\" formControlName=\\\"last_name\\\"></ion-input>\\n              </ion-item>\\n              <div *ngIf=\\\"last_name.invalid && (last_name.dirty || last_name.touched)\\\" class=\\\"error-message\\\">{{formError.last_name}}</div>\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">Email Address</ion-label>\\n                <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n              </ion-item>\\n              <div *ngIf=\\\"email.invalid && (email.dirty || email.touched)\\\" class=\\\"error-message\\\">{{formError.email}}</div>\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">Company</ion-label>\\n                <ion-input formControlName=\\\"company\\\"></ion-input>\\n                <!--<ion-label position=\\\"floating\\\">Inquiry Type</ion-label>\\n                <ion-select>\\n                  <ion-select-option value=\\\"bioinformatics\\\">Full Time Employment</ion-select-option>\\n                  <ion-select-option value=\\\"bioinformatics\\\">Contracting</ion-select-option>\\n                  <ion-select-option value=\\\"bioinformatics\\\">Contracting</ion-select-option>\\n                </ion-select>-->\\n              </ion-item>\\n              <ion-item>\\n                <ion-label position=\\\"floating\\\">Summary</ion-label>\\n                <ion-textarea formControlName=\\\"summary\\\"></ion-textarea>\\n              </ion-item>\\n              <div *ngIf=\\\"summary.invalid && (summary.dirty || summary.touched)\\\" class=\\\"error-message\\\">{{formError.summary}}</div>\\n              <ion-button color=\\\"success\\\" expand=\\\"block\\\" class=\\\"ion-margin-top\\\" [disabled]=\\\"contactForm.invalid\\\" (click)=\\\"onSubmit()\\\">Submit\\n                <ion-spinner *ngIf=\\\"is_loading\\\"></ion-spinner>\\n              </ion-button>\\n            </form>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\";"]}